#include <EEPROM.h>
#include <Wire.h>
#include <Adafruit_NeoPixel.h>

#define ADDRESS_DS1307          0x68
#define ADDRESS_EEPROM_COLOR    0
#define PIN_TIME_BUTTON         3
#define PIN_COLOR_BUTTON        2
#define PIN_NEOPIXELS           4

#define N_PIXELS                115
#define N_COLORS                6
#define N_SECONDS_LED           5

enum oclock_e {
    O_OCLOCK = 0,
    O_PAST,
    O_TO
};

enum minute_e {
    M_5 = 0,
    M_10,
    M_15,
    M_20,
    M_25,
    M_30
};

enum hour_e {
    H_1 = 0,
    H_2,
    H_3,
    H_4,
    H_5,
    H_6,
    H_7,
    H_8,
    H_9,
    H_10,
    H_11,
    H_12
};

struct time_s {
    int s;
    int m;
    int h;
};

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(N_PIXELS, PIN_NEOPIXELS, NEO_GRB + NEO_KHZ800);
byte zero = 0x00; //workaround for issue #527

byte oclock_led = 0;
byte second_led = 0;
byte minute_led = 0;
byte hour_led = 0;

uint32_t colors[] = {
        pixels.Color(0, 0, 255),
        pixels.Color(127, 127, 0),
        pixels.Color(127, 0, 127),
        pixels.Color(0, 127, 127),
        pixels.Color(255, 0, 0),
        pixels.Color(0, 255, 0)
};

int memory_color_index = 0;
uint32_t led_color;

void setup() {
    Wire.begin();

    pinMode(PIN_TIME_BUTTON, INPUT);
    pinMode(PIN_COLOR_BUTTON, INPUT);

    // Read color if stored in EEPROM
    memory_color_index = readColor();
    led_color = colors[memory_color_index];

    pixels.begin();
}

void loop() {
    struct time_s time = now();
    assignLeds(time.h, time.m, time.s);
    displayTime();

    if(digitalRead(PIN_COLOR_BUTTON) == HIGH) {
        onColorButtonPressed();
        delay(500);
    }
    if(digitalRead(PIN_TIME_BUTTON) == HIGH) {
        onTimeButtonPressed();
        delay(50);
    }
}

void onTimeButtonPressed() {
    struct time_s time = now();
    int h = time.h;
    int m = time.m + 1;

    if(m >= 60) {
        h += 1;
        m -= 60;
    }

    if(h >= 24) {
        h -= 24;
    }

    Wire.beginTransmission(ADDRESS_DS1307);
    Wire.write(zero); //stop oscillator

    Wire.write(decToBcd(0));
    Wire.write(decToBcd(m));
    Wire.write(decToBcd(h));
    Wire.write(decToBcd(1));
    Wire.write(decToBcd(1));
    Wire.write(decToBcd(1));
    Wire.write(decToBcd(0));

    Wire.write(zero); //start
    Wire.endTransmission();
}

void onColorButtonPressed() {
    memory_color_index = (memory_color_index + 1) % N_COLORS;
    led_color = colors[memory_color_index];

    EEPROM.update(ADDRESS_EEPROM_COLOR, memory_color_index);
}

struct time_s tick() {
    Wire.beginTransmission(ADDRESS_DS1307);
    Wire.write(zero);
    Wire.endTransmission();

    struct time_s time;
    Wire.requestFrom(ADDRESS_DS1307, 7);
    time.s = bcdToDec(Wire.read());
    time.m = bcdToDec(Wire.read());
    time.h = bcdToDec(Wire.read() & 0b111111);
    Wire.read();
    Wire.read();
    Wire.read();
    Wire.read();

    return time;
}

byte decToBcd(byte val) {
    return (val / 10 * 16) + (val % 10);
}

byte bcdToDec(byte val) {
    return (val / 16 * 10) + (val % 16);
}

void assignLeds(int hour, int min, int sec) {
    if(hour < 0 || hour > 23 || min < 0 || min > 59) {
        return;
    }

    second_led = sec % N_SECONDS_LED;

    if(min < 5) {            //??:00 --> ??:04
        oclock_led = O_OCLOCK;
    } else if(min < 35) {      //??:05 --> ??:34
        oclock_led = O_PAST;
        if(min >= 30) {         //??:30 --> ??:34
            minute_led = M_30;
        } else if(min >= 15 && min < 20) { //??:15 --> ??:19
            minute_led = M_15;
        } else {
            if(min >= 20) {       //??:20 --> ??:29
                minute_led = M_20;
                if(min >= 25) {    //??:25 --> ??:29
                    minute_led = M_25;
                }
            } else if(min >= 10) {  //??:10 --> ??:14
                minute_led = M_10;
            } else {                        //??:05 --> ??:09
                minute_led = M_5;
            }
        }
    } else {                            //??:35 --> ??:59
        hour = hour + 1;
        oclock_led = O_TO;
        if(min >= 45 && min < 50) { //??:45 --> ??:49
            minute_led = M_15;
        } else {
            if(min < 45) {        //??:35 --> ??:44
                minute_led = M_20;
                if(min < 40) {     //??:35 --> ??:39
                    minute_led = M_25;
                }
            } else if(min < 55) {   //??:50 --> ??:54
                minute_led = M_10;
            } else {                        //??:55 --> ??:59
                minute_led = M_5;
            }
        }
    }

    if(hour >= 12) {
        hour = hour - 12;
        if(hour == 12) {
            hour = hour - 12;
        }
    }
    hour_led = hour;
}

void turnOnPixels(int lo, int hi) {
    for(int i = lo; i <= hi; ++i) {
        pixels.setPixelColor(i, led_color);
    }
}

void turnOffPixels() {
    for(int i = 0; i < N_PIXELS; i++) {
        pixels.setPixelColor(i, 0);
    }
}

void displayTime() {
    turnOffPixels();

    for(int led_i = 0; led_i <= second_led; ++led_i) {
        pixels.setPixelColor(led_i, led_color); // move seconds led
    }

    // leds of IT IS are always on
    pixels.setPixelColor(104, led_color);
    pixels.setPixelColor(105, led_color);
    pixels.setPixelColor(107, led_color);
    pixels.setPixelColor(108, led_color);

    switch(oclock_led) {
        case O_OCLOCK:
            pixels.setPixelColor(5, led_color);
            pixels.setPixelColor(6, led_color);
            pixels.setPixelColor(7, led_color);
            pixels.setPixelColor(8, led_color);
            pixels.setPixelColor(9, led_color);
            pixels.setPixelColor(10, led_color);
            break;
        case O_PAST:
            pixels.setPixelColor(60, led_color);
            pixels.setPixelColor(61, led_color);
            pixels.setPixelColor(62, led_color);
            pixels.setPixelColor(63, led_color);
            break;
        case O_TO:
            pixels.setPixelColor(71, led_color);
            pixels.setPixelColor(72, led_color);
            break;
    }

    switch(minute_led) {
        case M_5:
        case M_25:
            pixels.setPixelColor(89, led_color);
            pixels.setPixelColor(90, led_color);
            pixels.setPixelColor(91, led_color);
            pixels.setPixelColor(92, led_color);
            if(minute_led == M_5)
                break;
        case M_20:
            pixels.setPixelColor(82, led_color);
            pixels.setPixelColor(83, led_color);
            pixels.setPixelColor(84, led_color);
            pixels.setPixelColor(85, led_color);
            pixels.setPixelColor(86, led_color);
            pixels.setPixelColor(87, led_color);
            break;
        case M_10:
            pixels.setPixelColor(74, led_color);
            pixels.setPixelColor(75, led_color);
            pixels.setPixelColor(76, led_color);
            break;
        case M_15:
            pixels.setPixelColor(96, led_color);
            pixels.setPixelColor(97, led_color);
            pixels.setPixelColor(98, led_color);
            pixels.setPixelColor(99, led_color);
            pixels.setPixelColor(100, led_color);
            pixels.setPixelColor(101, led_color);
            pixels.setPixelColor(102, led_color);
            break;
        case M_30:
            pixels.setPixelColor(78, led_color);
            pixels.setPixelColor(79, led_color);
            pixels.setPixelColor(80, led_color);
            pixels.setPixelColor(81, led_color);
            break;
    }

    switch(hour_led) {
        case H_1:
            pixels.setPixelColor(57, led_color);
            pixels.setPixelColor(58, led_color);
            pixels.setPixelColor(59, led_color);
            break;
        case H_2:
            pixels.setPixelColor(54, led_color);
            pixels.setPixelColor(55, led_color);
            pixels.setPixelColor(56, led_color);
            break;
        case H_3:
            pixels.setPixelColor(49, led_color);
            pixels.setPixelColor(50, led_color);
            pixels.setPixelColor(51, led_color);
            pixels.setPixelColor(52, led_color);
            pixels.setPixelColor(53, led_color);
            break;
        case H_4:
            pixels.setPixelColor(38, led_color);
            pixels.setPixelColor(39, led_color);
            pixels.setPixelColor(40, led_color);
            pixels.setPixelColor(41, led_color);
            break;
        case H_5:
            pixels.setPixelColor(42, led_color);
            pixels.setPixelColor(43, led_color);
            pixels.setPixelColor(44, led_color);
            pixels.setPixelColor(45, led_color);
            break;
        case H_6:
            pixels.setPixelColor(46, led_color);
            pixels.setPixelColor(47, led_color);
            pixels.setPixelColor(48, led_color);
            break;
        case H_7:
            pixels.setPixelColor(65, led_color);
            pixels.setPixelColor(66, led_color);
            pixels.setPixelColor(67, led_color);
            pixels.setPixelColor(68, led_color);
            pixels.setPixelColor(69, led_color);
            break;
        case H_8:
            pixels.setPixelColor(16, led_color);
            pixels.setPixelColor(17, led_color);
            pixels.setPixelColor(18, led_color);
            pixels.setPixelColor(19, led_color);
            pixels.setPixelColor(20, led_color);
            break;
        case H_9:
            pixels.setPixelColor(34, led_color);
            pixels.setPixelColor(35, led_color);
            pixels.setPixelColor(36, led_color);
            pixels.setPixelColor(37, led_color);
            break;
        case H_10:
            pixels.setPixelColor(13, led_color);
            pixels.setPixelColor(14, led_color);
            pixels.setPixelColor(15, led_color);
            break;
        case H_11:
            pixels.setPixelColor(21, led_color);
            pixels.setPixelColor(22, led_color);
            pixels.setPixelColor(23, led_color);
            pixels.setPixelColor(24, led_color);
            pixels.setPixelColor(25, led_color);
            pixels.setPixelColor(26, led_color);
            break;
        case H_12:
            paintPixels(27, 32);
            /*pixels.setPixelColor(27, led_color);
            pixels.setPixelColor(28, led_color);
            pixels.setPixelColor(29, led_color);
            pixels.setPixelColor(30, led_color);
            pixels.setPixelColor(31, led_color);
            pixels.setPixelColor(32, led_color);*/
            break;
    }

    pixels.show();
}

int readColor() {
    int color = EEPROM.read(ADDRESS_EEPROM_COLOR);
    if(color > (N_COLORS - 1) || color < 0) {
        color = 0;
    }
    return color;
}

